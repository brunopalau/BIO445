mutate(absolute_growth_rate_per_year = absolute_growth / (Follow.up.time/12))%>%
mutate(relative.growth.rate = ((Latest_tumor_vol / Initial_tumor_vol)**(1/Follow.up.time/12) - 1)  * 100)
# FOR YOU TO COMPARE: if your relative growth-rate is correctly calculated,
quantile(db$relative.growth.rate, probs = c(0.2, 0.8)) # should return 3.07455 25.21822
db <- db %>%
mutate(absolute_growth = Latest_tumor_vol - Initial_tumor_vol) %>%
mutate(absolute_growth_rate_per_year = absolute_growth / (Follow.up.time/12))%>%
mutate(relative.growth.rate = ((Latest_tumor_vol / Initial_tumor_vol)**(1/(Follow.up.time/12)) - 1)  * 100)
# FOR YOU TO COMPARE: if your relative growth-rate is correctly calculated,
quantile(db$relative.growth.rate, probs = c(0.2, 0.8)) # should return 3.07455 25.21822
ggplot(db, aes(x = Age, y= absolute_growth_rate_per_year))+
geom_point() +
geom_smooth(method = "lm")
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")
ggplot((db, aes(x = age, y = Initial_tumor_vol)))+
ggplot(db, aes(x = age, y = Initial_tumor_vol))+
goem_point()
ggplot(db, aes(x = age, y = Initial_tumor_vol))+
geom_point()
ggplot(db, aes(x = Age, y = Initial_tumor_vol))+
geom_point()
ggplot(db, aes(x = Age, y = Initial_tumor_vol))+
geom_point()
ggplot(db, aes(x = Age, y = Initial_tumor_vol))+
geom_point()+
geom_smooth("lm")
ggplot(db, aes(x = Age, y = Initial_tumor_vol))+
geom_point()+
geom_smooth(method="lm")
?log
?glm
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smoott()
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth()
?geom_smooth
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(method = "glm")
ggplot(db, aes(x = Age, y = Initial_tumor_vol))+
geom_point()+
geom_smooth(formula = poly(Initial_tumor_vol ~ Age, db))
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(formula = Initial_tumor_vol ~ poly(Age,2), db)
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(formula = Initial_tumor_vol ~ poly(Age,2), db)
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(formula = (relative.growth.rate ~ poly(Age,2), db))
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(formula = (relative.growth.rate ~ poly(Age,2)))
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(formula = (db$relative.growth.rate ~ poly(db$Age,2)))
db$relative.growth.rate
db$Age
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(formula = (relative.growth.rate ~ poly(Age,2)))
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(formula = y ~ poly(x, 2))
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(method = "lm", formula = y ~ poly(x, 2))
ggplot(db%>%filter(Age < 40), aes(x = Age, y = Initial_tumor_vol))+
geom_point()+
geom_smooth()
ggplot(db%>%filter(Age > 40), aes(x = Age, y = Initial_tumor_vol))+
geom_point()+
geom_smooth()
ggplot(db%>%filter(Age > 40), aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(method = "lm", formula = y ~ poly(x, 2))
ggplot(db%>%filter(Age > 40), aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(method = "lm", formula = y ~ poly(x, 4))
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(method = "lm", formula = y ~ poly(x, 4))
ggplot(db, aes(x = Age, y= relative.growth.rate))+
geom_point()+
geom_smooth(method = "lm")+
geom_smooth(method = "lm", formula = y ~ poly(x, 3))
## e) Calculate the tumor doubling
db$doubling.time =  (db$Follow.up.time/12) * (log(2)/log(db$Latest_tumor_vol/db$Initial_tumor_vol))
quantile(db$doubling.time, probs = c(0.2, 0.8))
ggplot(db, aes(x = Initial_tumor_vol, y = doubling.time))+
geom_point()
ggplot(db, aes(x = Initial_tumor_vol, y = doubling.time))+
geom_point()+
geom_smooth()
ggplot(db, aes(x = Initial_tumor_vol, y = doubling.time))+
geom_point()+
geom_smooth(method = "lm")
quantile(db$doubling.time, probs = c(0.2, 0.8))
ggplot(df, aes(x= Calcification, y = doubling.time))+
geom_boxplot()
ggplot(db, aes(x= Calcification, y = doubling.time))+
geom_boxplot()
ggplot(db, aes(x= Calcification, y = doubling.time))+
geom_boxplot()+
stat_compare_means(method = "t.test")
library(ggpubr)
ggplot(db, aes(x= Calcification, y = doubling.time))+
geom_boxplot()+
stat_compare_means(method = "t.test")
ggplot(db, aes(x= Age, y = doubling.time, color = Calcification))+
geom_boxplot()+
stat_compare_means(method = "t.test")
ggplot(db, aes(x= Age, y = doubling.time, color = Calcification))+
geom_point()+
stat_compare_means(method = "t.test")
## a)
# define the ODE
Gompertz <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
dN  <- r * N * log(K/N)
return(list(c(dN)))
})
}
pars  <- c(r = 0.015, K = 40)  # parameters
yini  <- c(N = 0.001)          # initial values
times <- seq(0, 2000, by = 1)  # time in days
## b)
# calling the ODE solver
out   <- as.data.frame(ode(yini, times, Gompertz, pars))
plot(out)
### c.1) with treatment
Gompertz_Treat1 <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
# let the tumor develop (reach carrying capacity), then introduce treatment at day 1095 (3 years)
# HINT: overwrite alpha before time is 1095
if(Time < 1095){dN  <- r * N * log(K/N)}else{dN  <- r * N * log(K/N) - alpha*c*N}
return(list(c(dN)))
})
}
pars <- c(r = 0.015, K = 40, alpha = 0.7, c = 0.3)
yini <- c(N = 0.001)
times <- seq(0, 2000, by = 1)
out   <- as.data.frame(ode(yini, times, Gompertz_Treat1, pars))
plot(out)
for(i in 1000:1500){
if((out$N[i]< 0.001)){
print(out[i,])
break
}
}
### c.3)
# drug concentration decreases with time
Gompertz_Treat2 <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
# let the tumor develop (reach carrying capacity),
# then introduce treatment at day 1095 (3 years)
# The drug concentration also has to descrease only
# since 1095 (before it was not in the body..)
if(Time < 1095){
dN  <- r * N * log(K/N)
dC <- 0
}else{
dN  <- r * N * log(K/N) - alpha*C*N
dC <- -0.25*C}
return(list(c(dN, dC)))
})
}
pars <- c(r = 0.015, K = 40, alpha = 0.7)
yini <- c(N = 0.001, C = 0.3)
times <- seq(0, 2000, by = 1)
# Visualize Tumor dynamics considering the decreasing drug concentration
out   <- as.data.frame(ode(yini, times, Gompertz_Treat2, pars))
plot(out$N)
# 50% of the tumor volume after treatment initiation
for(i in 1000:1500){
if((out$N[i]< (max(out$N)/2)+1) & (out$N[i]> (max(out$N)/2-1))){
print(out[i,])
}
}
# Elimination:
for(i in 1000:1500){
if((out$N[i]< 0.001)){
print(out[i,])
break
}
}
### c.4)
# increasing the drug effectivness
# increase the effectivness (alpha)
for(i in 1:10){
pars <- c(r = 0.015, K = 40, alpha = 1/10*i, t1 = 1095, t2 =, t3 =) ## YOUR CODE HERE ##
yini <- c(N = 0.001, C = 0.3)
times <- seq(0, 2000, by = 1)
out   <- as.data.frame(ode(yini, times, Gompertz_Treat2, pars))
plot(out$N)
}
out
?ode
Gompertz_Treat3 <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
# let the tumor develop (reach carrying capacity),
# then introduce treatment at day 1095 (3 years)
# The drug concentration also has to descrease only
# since 1095 (before it was not in the body..)
if(Time < 500){
dN  <- r * N * log(K/N)
dC <- 0
}
else{
dN  <- r * N * log(K/N) - alpha*C*N
dC <- -c*C
if(round(Time) %in% c(600,700,800,900,1000,1100,1200)){
dC <-0.3 - c*C
}
if(N < 1){dN = 0}
}
return(list(c(dN, dC)))
})
}
params_list <- list()
for (a in seq(0,1,length.out=10)){
for (c in seq(0.01,0.1,length.out=5)){
params_list <- append(params_list,list(c(a,c)))
}
}
out_all <- lapply(params_list,function(x){
alpha = x[[1]]
c = x[[2]]
pars <- c(r = 0.015, K = 40, alpha = alpha, c=c*i)
yini <- c(N = 0.001, C = 0.3)
times <- seq(0, 1300, by = 1)
out_first   <- as.data.frame(ode(yini, times, Gompertz_Treat3, pars))
out <- out_first
out$alpha_start <- rep(alpha,nrow(out_first))
out$c_start <- rep(c, nrow(out_first))
print(alpha)
return (out)
})
df_all <- data.frame(time = c(),N = c(), C = c(), alpha_start = c(), c_start = c())
for (i in 1:length(out_all)){
df <- out_all[[i]]
df_all <- rbind(df_all, df)
}
df_all$c_start <- as.factor(df_all$c_start)
ggplot(df_all,
aes(x = time,y = N, color = c_start))+
geom_point()+
facet_wrap(~alpha_start)
params_list <- list()
for (a in seq(0,1,length.out=10)){
for (c in seq(0.01,0.1,length.out=5)){
params_list <- append(params_list,list(c(a,c)))
}
}
out_all <- lapply(params_list,function(x){
alpha = x[[1]]
c = x[[2]]
pars <- c(r = 0.015, K = 40, alpha = alpha, c=c)
yini <- c(N = 0.001, C = 0.3)
times <- seq(0, 1300, by = 1)
out_first   <- as.data.frame(ode(yini, times, Gompertz_Treat3, pars))
out <- out_first
out$alpha_start <- rep(alpha,nrow(out_first))
out$c_start <- rep(c, nrow(out_first))
print(alpha)
return (out)
})
df_all <- data.frame(time = c(),N = c(), C = c(), alpha_start = c(), c_start = c())
for (i in 1:length(out_all)){
df <- out_all[[i]]
df_all <- rbind(df_all, df)
}
df_all$c_start <- as.factor(df_all$c_start)
ggplot(df_all,
aes(x = time,y = N, color = c_start))+
geom_point()+
facet_wrap(~alpha_start)
View(df)
x <- out_all[[1]]
x
which(x$N[100:,] < 1)
which(x$N[100:] < 1)
which(x$N[100:nrow(x$N)] < 1)
x$N
x$N[100:nrow(x$N)]
nrow(x$N)
which(x$N[100:length(x$N)] < 1)
pos <- which(x$N[100:length(x$N)] < 1)
pos
x %>%
filter(N < 1)%>%
select(N)
x
x %>%
filter(N < 1)%>%
select(time)
times <- x %>%
filter(N < 1)%>%
select(time)
times
times[times < 100]
times[times > 100]
times <- x %>%
filter(N < 0.001)%>%
select(time,c_start,alpha_start)
times
days_to_healthy <- lapply(out_all,function(x){
times <- x %>%
filter(N < 0.001)%>%
select(time,c_start,alpha_start)
return (times[times$time > 100,])
})
days_to_healthy
times <- x %>%
filter(N < 0.001)%>%
select(time,c_start,alpha_start)
times
days_to_healthy <- lapply(out_all,function(x){
times <- x %>%
filter(N < 0.001 & time > 100)%>%
select(time,c_start,alpha_start)
return (times)
})
days_to_healthy
times <- x %>%
filter(N < 0.01 & time > 100)%>%
select(time,c_start,alpha_start)
days_to_healthy <- lapply(out_all,function(x){
times <- x %>%
filter(N < 0.01 & time > 100)%>%
select(time,c_start,alpha_start)
return (times)
})
days_to_healthy
out_all
times <- x %>%
filter(N < 1 & time > 100)%>%
select(time,c_start,alpha_start)
days_to_healthy <- lapply(out_all,function(x){
times <- x %>%
filter(N < 1 & time > 100)%>%
select(time,c_start,alpha_start)
return (times)
})
days_to_healthy
times
x
days_to_healthy <- lapply(out_all,function(x){
times <- x %>%
filter(N < 1 & time > 100)%>%
select(time,c_start,alpha_start)
if (nrow(times) == 0){
return(data.frame(time = NA, c_start = x$c_start, alpha_start = x$alpha_start))
}
return (times[1,])
})
days_to_healthy
days_to_healthy <- lapply(out_all,function(x){
times <- x %>%
filter(N < 1 & time > 100)%>%
select(time,c_start,alpha_start)
if (nrow(times) == 0){
return(data.frame(time = NA, c_start = x$c_start, alpha_start = x$alpha_start))
}
return (times[1,])
})
days_to_healthy
days_to_healthy <- lapply(out_all,function(x){
times <- x %>%
filter(N < 1 & time > 100)%>%
select(time,c_start,alpha_start)
if (nrow(times) == 0){
return(data.frame(time = NA, c_start = x$c_start[1], alpha_start[1] = x$alpha_start[1]))
times[1,]
days_to_healthy <- lapply(out_all,function(x){
times <- x %>%
filter(N < 1 & time > 100)%>%
select(time,c_start,alpha_start)
if (nrow(times) == 0){
return(data.frame(time = NA, c_start = x$c_start[1], alpha_start[1] = x$alpha_start[1]))
days_to_healthy <- lapply(out_all,function(x){
times <- x %>%
filter(N < 1 & time > 100)%>%
select(time,c_start,alpha_start)
if (nrow(times) == 0){
return(data.frame(time = NA, c_start = x$c_start[1], alpha_start = x$alpha_start[1]))
}
return (times[1,])
})
days_to_healthy
rbind(days_to_healthy)
rbind(unlist(days_to_healthy))
days_list <- list()
for (i in 1:length(days_to_healthy)){
df <- days_to_healthy[[i]]
days_list <- rbind(days_list, df)
}
days_list
days_df <- list()
for (i in 1:length(days_to_healthy)){
df <- days_to_healthy[[i]]
days_df <- rbind(days_df, df)
}
ggplot(days_df, aes(x = alpha_start, y = c_start))+
geom_line()
ggplot(days_df, aes(x = alpha_start, y = c_start, color = time))+
geom_point()
ggplot(days_df, aes(x = time, y = c_start, color = alpha_start))+
geom_point()
ggplot(days_df, aes(x = alpha_start, y = c_start, color = time))+
geom_point()
ggplot(days_df, aes(x = alpha_start, y = c_start, color = time))+
geom_point()+
scale_color_brewer(palette = 1)
ggplot(days_df, aes(x = alpha_start, y = c_start, color = time))+
geom_point()+
scale_color_continuous(palette = 1)
ggplot(days_df, aes(x = alpha_start, y = c_start, color = time))+
geom_point()+
scale_color_continuous()
ggplot(days_df, aes(x = time, y = c_start, color = alpha_start))+
geom_point()+
scale_color_gradient(low="blue", high="red")
ggplot(days_df, aes(x = time, y = c_start, color = alpha_start))+
geom_point()+
scale_color_gradient(low="white", high="red")
ggplot(days_df, aes(x = alpha_start, y = c_start, color = time))+
geom_point()+
scale_color_gradient(low="white", high="red")
ggplot(days_df, aes(x = time, y = c_start, color = alpha_start))+
geom_point()+
scale_color_gradient(low="darkred", high="red")
ggplot(days_df, aes(x = alpha_start, y = c_start, color = time))+
geom_point()+
scale_color_gradient(low="darkred", high="red")
days_df <- days_df%>%
mutate(days_till_healt = round((time-500)/100))
days_df
days_df <- days_df%>%
mutate(days_till_health = round((time-500)/100))
ggplot(days_df, aes(x = days_till_health, y = c_start, color = alpha_start, size = 10))+
geom_point()+
scale_color_gradient(low="darkred", high="red")
ggplot(days_df, aes(x = alpha_start, y = c_start, color = days_till_health))+
geom_point()+
scale_color_gradient(low="darkred", high="red")
ggplot(days_df, aes(x = alpha_start, y = c_start, color = days_till_health, size = 10))+
geom_point()+
scale_color_gradient(low="darkred", high="red")
days_df <- days_df%>%
mutate(treatments_till_healthy = round((time-500)/100))
days_df <- days_df%>%
mutate(treatments_till_healthy = round((time-500)/100))
ggplot(days_df, aes(x = alpha_start, y = c_start, color = treatments_till_healthy, size = 10))+
geom_point()+
scale_color_gradient(low="darkred", high="red")
days_df <- days_df%>%
mutate(treatments_till_healthy = round((time-500)/100)+1)
ggplot(days_df, aes(x = alpha_start, y = c_start, color = treatments_till_healthy, size = 10))+
geom_point()+
scale_color_gradient(low="darkred", high="red")
ggplot(days_df, aes(x = alpha_start, y = c_start, color = as.factor(treatments_till_healthy), size = 10))+
geom_point()+
scale_color_gradient(low="darkred", high="red")
ggplot(days_df, aes(x = alpha_start, y = c_start, color = as.factor(treatments_till_healthy), size = 10))+
geom_point()
ggplot(days_df, aes(x = alpha_start, y = c_start, color = as.factor(treatments_till_healthy), size = 10))+
geom_point()+
scale_color_manual(values=wes_palette(n=3, name="GrandBudapest"))
library(wesanderson)
days_df <- days_df%>%
mutate(treatments_till_healthy = round((time-500)/100)+1)
install.packages("wesanderson")
library(wesanderson)
days_df <- days_df%>%
mutate(treatments_till_healthy = round((time-500)/100)+1)
ggplot(days_df, aes(x = alpha_start, y = c_start, color = as.factor(treatments_till_healthy), size = 10))+
geom_point()+
scale_color_manual(values=wes_palette(n=3, name="GrandBudapest"))
days_df <- days_df%>%
mutate(treatments_till_healthy =as.factor(round((time-500)/100)+1))
ggplot(days_df, aes(x = alpha_start, y = c_start, color = treatments_till_healthy, size = 10))+
geom_point()+
scale_color_manual(breaks = c("1", "2", "3"),
values=c("red", "blue", "green"))
ggplot(days_df, aes(x = alpha_start, y = c_start, color = treatments_till_healthy, size = 10))+
geom_point()+
scale_color_manual(breaks = c("1", "2", "3"),
values=c("red", "orange", "yellow"))
ggplot(days_df, aes(x = alpha_start, y = c_start, color = treatments_till_healthy, size = 10))+
geom_point()+
scale_color_manual(breaks = c("1", "2", "3", "NA"),
values=c("red", "orange", "yellow", "grey"))
